import json #–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
import random #—Ä–∞–Ω–¥–æ–º–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å —ç–º–æ–¥–∂–∏
import pandas as pd #—Ä–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–ø—É—Å–æ–º —Å–ª–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä–∏–∫–∞
from telegram import Update  #—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes #–Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞

emoji_tasks = json.load(open("data/emoji_tasks.json", "r", encoding="utf-8"))
words_df = pd.read_csv("data/words_ru_en_zh.csv")

user_states = {} #—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_states[update.effective_user.id] = {"mode": "menu"} #–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø NichosiStudies ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —É—á–∏—Ç–µ–ª–µ–π –∏ –¥–µ—Ç–µ–π-–±–∏–ª–∏–Ω–≥–≤–æ–≤ üá∑üá∫üá¨üáßüá®üá≥\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ /emoji ‚Äî —É–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ –ø–æ —ç–º–æ–¥–∑–∏\n"
        "–∏–ª–∏ /translate ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ç—Ä—ë—Ö —è–∑—ã–∫–∞—Ö!"
    )

async def emoji(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task = random.choice(emoji_tasks)
    user_states[update.effective_user.id] = {
        "mode": "emoji",
        "answer_ru": task["answer_ru"].lower(),
        "answer_en": task["answer_en"].lower(),
        "answer_zh": task["answer_zh"]
    }
    await update.message.reply_text(f"–£–≥–∞–¥–∞–π, —á—Ç–æ —ç—Ç–æ: {task['emoji']}")

async def translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    row = words_df.sample().iloc[0]
    user_states[update.effective_user.id] = {
        "mode": "translate",
        "answer_ru": row["word_ru"].lower(),
        "answer_en": row["word_en"].lower(),
        "answer_zh": row["word_zh"]
    }
    await update.message.reply_text(f"–ö–∞–∫ –±—É–¥–µ—Ç ¬´{row['word_ru']}¬ª –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –∫–∏—Ç–∞–π—Å–∫–æ–º?")

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip().lower()

    if user_id not in user_states:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    state = user_states[user_id]

    if state["mode"] == "emoji":
        if text in [state["answer_ru"], state["answer_en"], state["answer_zh"]]:
            await update.message.reply_text(
                f"–û—Ç–ª–∏—á–Ω–æ! –û—Ç–≤–µ—Ç:\n"
                f"üá∑üá∫ {state['answer_ru']}\n"
                f"üá¨üáß {state['answer_en']}\n"
                f"üá®üá≥ {state['answer_zh']}"
            )
        else:
            await update.message.reply_text("–ù–µ —Å–æ–≤—Å–µ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /emoji –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")

    elif state["mode"] == "translate":
        await update.message.reply_text(
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:\n"
            f"üá¨üáß {state['answer_en']}\n"
            f"üá®üá≥ {state['answer_zh']}"
        )
    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /emoji –∏–ª–∏ /translate, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

if __name__ == "__main__":
    app = ApplicationBuilder().token("7895954616:AAHstYswXpY1mTnVwHaLQlC8SLXRJUO2KPc").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("emoji", emoji))
    app.add_handler(CommandHandler("translate", translate))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()